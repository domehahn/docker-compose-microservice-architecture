services:
  vault:
    image: hashicorp/vault:latest
    restart: always
    volumes:
      - vault_data:/vault/data
      - vault_log:/etc/vault/logs
      - ./vault:/vault
    ports:
      - 8200:8200
    env_file:
      - ./vault/vault.env
    cap_add:
      - IPC_LOCK
    container_name: vault
    entrypoint: "vault server -dev"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8200 || exit 1
      interval: 10s
      retries: 12
      start_period: 10s
      timeout: 10s
    networks:
      - microservice-network

  consul:
    image: hashicorp/consul:latest
    restart: always
    ports:
      - 8500:8500
    env_file:
      - ./consul/consul.env
    container_name: consul
    volumes:
      - consul_data:/consul/data
    networks:
      - microservice-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 4317:4317
      - 4318:4318
      - 14250:14250
      - 14268:14268
      - 14269:14269
      - 9411:9411
    networks:
      - microservice-network

  #docker compose run --rm terraform-consul init
  #docker compose run --rm terraform-consul plan
  #docker compose run --rm terraform-consul apply
  terraform-consul:
    image: hashicorp/terraform:0.14.10
    volumes:
      - ./terraform/consul:/infra
    env_file:
      - ./terraform/terraform.env
    working_dir: /infra
    restart: unless-stopped
    networks:
      - microservice-network

  #docker compose run --rm terraform-vault init
  #docker compose run --rm terraform-vault plan
  #docker compose run --rm terraform-vault apply
  terraform-vault:
    image: hashicorp/terraform:0.14.10
    volumes:
      - ./terraform/vault:/infra
    env_file:
      - ./terraform/terraform.env
    working_dir: /infra
    restart: unless-stopped
    networks:
      - microservice-network

  redis-master:
    container_name: redis-master
    image: 'bitnami/redis:latest'
    restart: always
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=redispassword
    ports:
      - 6379:6379
    networks:
      - microservice-network

  redis-slave:
    container_name: redis-slave
    image: 'bitnami/redis:latest'
    restart: always
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PASSWORD=redispassword
      - REDIS_PASSWORD=redispassword
    ports:
      - 7000:6379
    depends_on:
      redis-master:
        condition: service_started
    networks:
      - microservice-network

  redis-sentinel-1:
    image: 'bitnami/redis-sentinel:latest'
    container_name: sentinel-1
    restart: always
    environment:
      - REDIS_MASTER_SET=redis-master
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PASSWORD=redispassword
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
    depends_on:
      redis-master:
        condition: service_started
      redis-slave:
        condition: service_started
    ports:
      - 26379:26379
    networks:
      - microservice-network

  redis-sentinel-2:
    image: 'bitnami/redis-sentinel:latest'
    container_name: sentinel-2
    restart: always
    environment:
      - REDIS_MASTER_SET=redis-master
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PASSWORD=redispassword
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
    depends_on:
      redis-master:
        condition: service_started
      redis-slave:
        condition: service_started
    ports:
      - 26380:26379
    networks:
      - microservice-network

  redis-sentinel-3:
    image: 'bitnami/redis-sentinel:latest'
    container_name: sentinel-3
    restart: always
    environment:
      - REDIS_MASTER_SET=redis-master
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PASSWORD=redispassword
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
    depends_on:
      redis-master:
        condition: service_started
      redis-slave:
        condition: service_started
    ports:
      - 26381:26379
    networks:
      - microservice-network

  redisinsight:
    image: redislabs/redisinsight:latest
    ports:
      - 8001:8001
    volumes:
      - redisinsight_data:/db
    depends_on:
      redis-master:
        condition: service_started
    networks:
      - microservice-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    env_file:
      - ./rabbitmq/rabbitmq.env
    networks:
      - microservice-network

  mongodb-data:
    image: mongo:latest
    container_name: mongodb-data
    ports:
      - 27017:27017
    env_file:
      - ./mongodb/mongodb-data.env
    environment:
      - MONGO_INITDB_DATABASE=data_db
    healthcheck:
      test:  echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservice-network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - 27020:8081
    env_file:
      - ./mongo-express/mongo-express.env
    volumes:
      - mongodb_data:/data/db
    depends_on:
      mongodb-data:
        condition: service_healthy
    networks:
      - microservice-network

  otel-collector:
    image: otel/opentelemetry-collector
    container_name: otel-collector
    command: [--config=/etc/otel-collector-config.yaml]
    volumes:
      - ./otel-collector/config.yaml:/etc/otel-collector-config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    networks:
      - microservice-network

  prometheus:
    image: bitnami/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    env_file:
      - ./prometheus/prometheus.env
    volumes:
      - ./prometheus/config:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
    networks:
      - microservice-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    env_file:
      - ./grafana/grafana.env
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - microservice-network

  config-server:
    image: ghcr.io/domehahn/config-server:latest
    container_name: config-server
    env_file:
      - ./config-server/config-server.env
    ports:
      - 1234:1234
    restart: always
    volumes:
      - filebeat_data:/tmp
    depends_on:
      vault:
        condition: service_started
      consul:
        condition: service_started
    networks:
      - microservice-network
  
  api-gateway:
    image: ghcr.io/domehahn/api-gateway:latest
    container_name: api-gateway
    env_file:
      - ./api-gateway/api-gateway.env
    ports:
      - 8080:8080
    restart: always
    volumes:
      - filebeat_data:/tmp
    depends_on:
      redis-master:
        condition: service_started
      config-server:
        condition: service_started
    networks:
      - microservice-network

  event-service:
    image: ghcr.io/domehahn/event-service:latest
    container_name: event-service
    env_file:
      - ./event-service/event-service.env
    restart: always
    volumes:
      - filebeat_data:/tmp
    depends_on:
      rabbitmq:
        condition: service_started
      config-server:
        condition: service_started
    networks:
      - microservice-network

  data-service:
    image: ghcr.io/domehahn/data-service:latest
    container_name: data-service
    env_file:
      - ./data-service/data-service.env
    restart: always
    volumes:
      - filebeat_data:/tmp
    depends_on:
      mongodb-data:
        condition: service_started
      config-server:
        condition: service_started
    networks:
      - microservice-network

  serverless-service:
    image: ghcr.io/domehahn/serverless-service:latest
    container_name: serverless-service
    env_file:
      - ./serverless-service/serverless-service.env
    restart: always
    volumes:
      - filebeat_data:/tmp
    depends_on:
      rabbitmq:
        condition: service_started
      config-server:
        condition: service_started
    networks:
      - microservice-network

volumes:
  vault_data:
  vault_log:
  consul_data:
  redisinsight_data:
  filebeat_data:
  mongodb_data:
  grafana_data:
  logstash_data:
  elasticsearch_data:
  setup_data:

networks:
  microservice-network:
    driver: bridge
    external: false